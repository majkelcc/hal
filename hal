#!/bin/bash

export CHANG_COLOR_RED='\033[0;31m'
export CHANG_COLOR_GREEN='\033[0;32m'
export CHANG_COLOR_YELLOW='\033[0;33m'
export CHANG_NO_COLOR='\033[0m'
export CHANG_CLEAR_LINE='\r\033[K'
export CHANG_COLOR_DIM='\e[2m'

export CHANG_SET=${CHANG_SET:--eu}
set ${CHANG_SET}

STEP_LINE=false

fail() {
  printf "${CHANG_COLOR_RED}⚡️  ${@}${CHANG_NO_COLOR}\n" >&2
  exit 1
}

step() {
  STEP_LINE=true
  printf "${CHANG_CLEAR_LINE}${CHANG_NO_COLOR}${@}${CHANG_NO_COLOR}" >&2
}

chang_info() {
  printf "${CHANG_COLOR_YELLOW}▷ ${@}${CHANG_NO_COLOR}\n" >&2
}

chang_dir() {
  test -d .chang/bin
}

finish_step_line() {
  printf $(${STEP_LINE} && echo "\n") 1>&2
  STEP_LINE=false
}

chang_create_volume_if_not_exists() {
  local name=${1}
  if ! docker volume ls -q | grep -q "^${name}$"; then
    docker run --rm \
      --volume "${name}":/volume \
      ${CHANG_MIN_IMAGE} \
      chown ${CHANG_UID}:${CHANG_GID} /volume
  fi
  exit 0
}

chang_create_network_if_not_exists() {
  local name=${1}
  if test -z $(docker network ls -qf "name=^${name}$"); then
    docker network create "${name}"
  fi
}

chang_install() {
  port_index=${1:-0}
  app_port=${2:-3000}
  subdomain=${3:-}
  if [[ ${CHANG_REV_PROXY_ENABLED} ]]; then
    local name=${CHANG_PWD##*/}
    mkdir -p ${CHANG_PATH}
    rm -f ${CHANG_PATH}/"${name}"
    ln -s "${CHANG_PWD}" ${CHANG_PATH}/"${name}"
    _chang_install_dev_server_if_exists "${name}"
    _chang_install_dev_server_if_exists "chang"
    hal-rev-proxy add $name $port_index $app_port $subdomain
  fi
}

_chang_install_dev_server_if_exists() {
  if [[ -n ${CHANG_DEV_SERVER_PATH:-} ]]; then
    chang_update_port
    find ${CHANG_PATH} -type l | while read chang_project; do
      rm -f ${CHANG_DEV_SERVER_PATH%/}/"${chang_project##*/}"
      (
        cd ${CHANG_DEV_SERVER_PATH%/}
        rm -f "${chang_project##*/}"
        ln -s chang "${chang_project##*/}"
      )
    done
  fi
}

chang_update_port() {
  if [[ -n ${CHANG_DEV_SERVER_PATH:-} ]]; then
    echo ${CHANG_PORT} > ${CHANG_DEV_SERVER_PATH%/}/chang
  fi
}

chang() {
  echo "\`chang\` command is not available inside chang scripts" 2>&1
  return 1
}

app_network_id() {
  echo "chang_$(path_hash ${1})"
}

path_hash() {
  echo ${1} | shasum - | head -c 8
}

chang_current_branch() {
  git branch | grep \* | cut -d ' ' -f2-
}

chang_last_change_commit() {
  IFS=', ' read -ra args <<< "${@}"
  git log -n1 --oneline "${args[@]}" 2>/dev/null | awk '{print $1;}'
}

chang_last_change_branch() {
  IFS=', ' read -ra args <<< "${@}"
  git log -n1 --oneline "${args[@]}" | awk '{print $2;}'
}

chang_marker_check_commit() {
  IFS=, read -ra args <<< "${@}"
  local commit=$(chang_last_change_commit "${args[@]}")
  if test -n ${commit} && test -f ${CHANG_TMP_PATH}/commit_marks/$(chang_mark_filename "${args[@]}")_${commit}; then
    return 0
  else
    return 1
  fi
}

chang_marker_mark_commit() {
  IFS=, read -ra args <<< "${@}"
  mkdir -p ${CHANG_TMP_PATH}/commit_marks
  local commit=$(chang_last_change_commit "${args[@]}")
  touch ${CHANG_TMP_PATH}/commit_marks/$(chang_mark_filename "${args[@]}")_${commit}
}

chang_marker_check_branch() {
  IFS=, read -ra args <<< "${@}"
  local branch=$(chang_last_change_branch "${args[@]}")
  if test -n ${branch} && test -f ${CHANG_TMP_PATH}/branch_marks/$(chang_mark_filename "${args[@]}")_${branch}; then
    return 0
  else
    return 1
  fi
}

chang_marker_mark_branch() {
  IFS=, read -ra args <<< "${@}"
  mkdir -p ${CHANG_TMP_PATH}/branch_marks
  local branch=$(chang_last_change_branch "${args[@]}")
  touch ${CHANG_TMP_PATH}/branch_marks/$(chang_mark_filename "${args[@]}")_${branch}
}

chang_state_compare_commit() {
  IFS=, read -ra args <<< "${@}"
  local commit=$(chang_last_change_commit "${args[@]}")
  if test -n ${commit} && [[ $(cat "${CHANG_TMP_PATH}/state/commit_$(chang_mark_filename "${args[@]}")" 2>/dev/null) == ${commit} ]]; then
    return 0
  else
    return 1
  fi
}

chang_state_compare_branch() {
  IFS=, read -ra args <<< "${@}"
  local branch=$(chang_last_change_branch "${args[@]}")
  if test -n ${branch} && [[ $(cat "${CHANG_TMP_PATH}/state/branch_$(chang_mark_filename "${args[@]}")" 2>/dev/null) == ${branch} ]]; then
    return 0
  else
    return 1
  fi
}

chang_state_update_commit() {
  IFS=, read -ra args <<< "${@}"
  mkdir -p ${CHANG_TMP_PATH}/state
  chang_last_change_commit "${args[@]}" > "${CHANG_TMP_PATH}/state/commit_$(chang_mark_filename "${args[@]}")"
}

chang_state_update_branch() {
  IFS=, read -ra args <<< "${@}"
  mkdir -p ${CHANG_TMP_PATH}/state
  chang_last_change_branch "${args[@]}" > "${CHANG_TMP_PATH}/state/branch_$(chang_mark_filename "${args[@]}")"
}

chang_tmp_clean() {
  find ${CHANG_TMP_PATH} -mtime +${1:-7} -type f -delete
}

chang_running_container_name() {
  docker ps | grep -oE "[a-zA-Z0-9_-]+${CHANG_APP_HASH}_${1}_1" || true
}

chang_mark_filename() {
  sed 's/[^a-zA-Z0-9._-]//g' <<< "${@}" | head -c 200
}

export -f chang_running_container_name
export -f chang_last_change_commit
export -f chang_last_change_branch

export -f chang_marker_check_branch
export -f chang_marker_check_commit
export -f chang_marker_mark_branch
export -f chang_marker_mark_commit

export -f chang_state_compare_branch
export -f chang_state_compare_commit
export -f chang_state_update_branch
export -f chang_state_update_commit

export -f chang_tmp_clean
export -f chang_mark_filename
export -f fail
export -f step
export -f chang_info

export -f chang_create_volume_if_not_exists
export -f chang_create_network_if_not_exists
export -f chang_install
export -f chang
export -f _chang_install_dev_server_if_exists
export -f chang_update_port

export CHANG_PWD=$(pwd -P)
export BIN=${CHANG_PWD}/.chang/bin
export CHANG_UID=${CHANG_UID:-1000}
export CHANG_GID=${CHANG_GID:-1000}
export CHANG_PORT=${CHANG_PORT:-80}
export CHANG_EXTRA_PORTS_PREFIX=${CHANG_EXTRA_PORTS_PREFIX:-807}
export CHANG_PATH=${HOME}/.chang
export CHANG_MIN_IMAGE=alpine:latest
export CHANG_DEV_SERVER_PATH=${CHANG_DEV_SERVER_PATH:-${HOME}/.puma-dev}
export CHANG_TMP_PATH=.chang/tmp
export CHANG_REV_PROXY_ENABLED=${CHANG_REV_PROXY_ENABLED:-true}
export CHANG_VERSION=2

read CHANG_VOLUME < <(hal-sync)
CHANG_APP_NETWORK_ID=$(hal-rev-proxy)

export CHANG_VOLUME=${CHANG_VOLUME}
export CHANG_APP_HASH=${CHANG_VOLUME##*_}
export CHANG_APP_NETWORK_ID=${CHANG_APP_NETWORK_ID}
export COMPOSE_PROJECT_NAME=${CHANG_VOLUME##chang-sync_}

cmd_path=".chang/bin"
while [[ ! -z ${1:-} ]]; do
  [ -d ${cmd_path}/${1} ] || break
  cmd_path+="/$1"
  shift
done

cmd=${1:-}

run() {
  [[ -x $1 ]] || fail "$1 is not executable"
  $1 "${@:2}"
  exit_code=$?
  case ${exit_code} in
    0|130)
      exit ${exit_code}
      ;;
    *)
      fail "${@:-} exited with code ${exit_code}"
      ;;
  esac
}

if [[ -f .chang/environment ]]; then
  source .chang/environment
fi

if [[ -n ${CHANG_REQUIRE_VERSION:-} ]]; then
  if [[ -n ${CHANG_UPDATED:-} ]]; then
    fail "VERSION MISMATCH: latest version of chang is ${CHANG_VERSION}, but version requested is ${CHANG_REQUIRE_VERSION}"
  fi
  if [[ ${CHANG_VERSION} -lt ${CHANG_REQUIRE_VERSION} ]]; then
    chang_info "Updating chang"
    (
      cd ${0%/*}
      git pull --rebase
    )
    export CHANG_UPDATED=true
    ${0##*/} "${@:-}"
    exit $?
  fi
fi

if [[ ${cmd_path}/${cmd} != ".chang/bin/" ]]; then
  if [[ -z $cmd ]]; then
    [[ -f "${cmd_path}/${cmd_path##*/}" ]] || fail "command not found"
    run "${cmd_path}/${cmd_path##*/}" || fail "chang ${@:-} exit with code ${?}"
  elif [[ -f "${cmd_path}/${cmd}" ]]; then
    run "${cmd_path}/${cmd}" "${@:2}" || fail "chang ${@:-} exit with code ${?}"
  else
    [[ -f "${cmd_path}/${cmd_path##*/}" ]] || fail "command not found"
    run "${cmd_path}/${cmd_path##*/}" "${@:1}" || fail "chang ${@:-} exit with code ${?}"
  fi
else
  if [ -x $BIN/status ]; then
    $BIN/status
  else
    fail "chang what?"
  fi
fi

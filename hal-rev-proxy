#!/bin/bash

set ${CHANG_SET:--eu}

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NO_COLOR='\033[0m'
CLEAR_LINE='\r\033[K'
DIM='\e[2m'
STEP_LINE=false

fail() {
  printf "${RED}❌  ${1}${NO_COLOR}\n" 1>&2
  exit 1
}

step() {
  STEP_LINE=true
  printf "${CLEAR_LINE}${NO_COLOR}${@:?}${NO_COLOR}" 1>&2
}

quiet_step() {
  step "${DIM}▷ ${@:?}"
}

verbose_step() {
  step "${YELLOW}▷ ${@:?}"
}

finish_step_line() {
  printf $(${STEP_LINE} && echo "\n") 1>&2
  STEP_LINE=false
}

CHANG_NETWORK=${CHANG_NETWORK:-chang}
CHANG_PORT=${CHANG_PORT:-80}
CHANG_PATH=${HOME}/.chang
CHANG_REV_PROXY_CONTAINER=${CHANG_REV_PROXY_CONTAINER:-chang-rev-proxy}
CHANG_REV_PROXY_IMAGE=${CHANG_REV_PROXY_IMAGE:-majkel/chang-rev-proxy}
CHANG_REV_PROXY_ENABLED=${CHANG_REV_PROXY_ENABLED:-true}

running() {
  ! test -z $(docker ps -q --filter name=^/${CHANG_REV_PROXY_CONTAINER}$)
}

start() {
  if test -z $(docker network ls -qf "name=^chang$"); then
    docker network create chang
  fi

  docker run -d \
    --name ${CHANG_REV_PROXY_CONTAINER} \
    -p 127.0.0.1:${CHANG_PORT}:8080 \
    -p 127.0.0.1:${CHANG_EXTRA_PORTS_PREFIX}1:8081 \
    -p 127.0.0.1:${CHANG_EXTRA_PORTS_PREFIX}2:8082 \
    -p 127.0.0.1:${CHANG_EXTRA_PORTS_PREFIX}3:8083 \
    -p 127.0.0.1:${CHANG_EXTRA_PORTS_PREFIX}4:8084 \
    -p 127.0.0.1:${CHANG_EXTRA_PORTS_PREFIX}5:8085 \
    --network=chang \
    ${CHANG_REV_PROXY_IMAGE} > /dev/null
}

add_apps() {
  find ${CHANG_PATH} -maxdepth 1 -type l | while read app; do
    add_app "${app##*/}"
  done
  add_chang_app
}

add_app() {
  local name=${1}
  local port_index=${2}
  local app_port=${3}
  local subdomain=${4:-}
  port=808${port_index}
  if [[ $port_index == 0 ]]; then
    app_network_sufix=""
  else
    app_network_sufix="_${port_index}"
  fi
  add_app_conf $port "${subdomain:+${subdomain}.}${name}" "$(app_network_id $PWD)${app_network_sufix}:${app_port}"
}

add_app_conf() {
  local port=${1}
  local name=${2}
  local target=${3}
  cat <<CONF | docker exec -i ${CHANG_REV_PROXY_CONTAINER} sh -c "cat - > /nginx.d/chang/${name}_${port}.dev"
server {
  set \$target ${target};
  keepalive_timeout 0;

  listen ${port};
  server_name .${name}.dev .${name}.localhost;
  client_max_body_size 10M;

  location / {
    proxy_pass_request_headers on;
    error_page 502 @offline;
    proxy_pass http://\$target;
  }

  location @offline {
    return 502 "#502 Bad gateway: it looks like ${name} app is not running";
  }
}
CONF
  if ! docker exec -i ${CHANG_REV_PROXY_CONTAINER} sh -c "test -f /var/www/${name}.dev"; then
    cat <<CONF | docker exec -i ${CHANG_REV_PROXY_CONTAINER} sh -c "cat - >> /var/www/chang.html && touch /var/www/${name}.dev"
  <p><a href="//${name}.dev">${name}.dev</a></p>
CONF
  fi
  add_chang_app
}

add_chang_app() {
cat <<CONF | docker exec -i ${CHANG_REV_PROXY_CONTAINER} sh -c "cat - > /nginx.d/chang/chang.dev"
server {
  listen 8080;
  server_name chang.dev localhost;

  location / {
    root /var/www;
    index chang.html;
  }
}
CONF
}

app_network_id() {
  echo chang_$(path_hash "${1}")
}

path_hash() {
  echo ${1} | shasum - | head -c 8
}

reload() {
  docker exec ${CHANG_REV_PROXY_CONTAINER} nginx -s reload 2>/dev/null
}

remove() {
  docker rm -f ${CHANG_REV_PROXY_CONTAINER} >/dev/null
}

exists() {
  ! test -z $(docker ps -aq --filter name=^/${CHANG_REV_PROXY_CONTAINER}$)
}

remove_if_exists() {
  if exists; then
    remove
  fi
}

case "${1:-}" in
  ""|start)
    if [[ ${CHANG_REV_PROXY_ENABLED} == true ]] && ! running; then
      quiet_step "Starting chang-rev-proxy"
      remove_if_exists
      start
      # add_apps
      # reload
      quiet_step "Chang-rev-proxy started"
      finish_step_line
    fi
    app_network_id "${CHANG_PWD:-$(pwd -P)}"
    ;;
  stop)
    remove_if_exists
    ;;
  add)
    if [[ ${CHANG_REV_PROXY_ENABLED} == true ]]; then
      add_app "${@:2}"
      reload
    fi
    ;;
  *)
    fail "Usage: chang-rev-proxy [start|stop|add]"
    ;;
esac
